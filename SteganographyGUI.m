function SteganographyGUI
    % Create main figure
    fig = figure('Name', 'Image Steganography', ...
        'Position', [100 100 1200 700], ...
        'MenuBar', 'none', ...
        'NumberTitle', 'off', ...
        'Color', 'white');

    % Create control panel (left side)
    controlPanel = uipanel('Parent', fig, ...
        'Title', 'Controls', ...
        'Position', [0.02 0.02 0.25 0.96], ...
        'BackgroundColor', 'white');

    % Add Load Image Button at the top
    uicontrol('Parent', controlPanel, ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [0.1 0.85 0.8 0.1], ...
        'String', 'LOAD IMAGE', ...
        'BackgroundColor', [0.2 0.6 1], ...
        'ForegroundColor', 'white', ...
        'FontSize', 12, ...
        'FontWeight', 'bold', ...
        'Callback', @loadImage);

    % Add text area for message input
    uicontrol('Parent', controlPanel, ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.1 0.75 0.8 0.05], ...
        'String', 'Enter Secret Message:', ...
        'BackgroundColor', 'white', ...
        'FontSize', 10);

    hMessage = uicontrol('Parent', controlPanel, ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Position', [0.1 0.6 0.8 0.15], ...
        'Max', 2, ...
        'BackgroundColor', [0.95 0.95 0.95], ...
        'FontSize', 10);

    % Add Embed and Extract buttons
    uicontrol('Parent', controlPanel, ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [0.1 0.45 0.8 0.1], ...
        'String', 'Embed Message', ...
        'BackgroundColor', [0.2 0.8 0.2], ...
        'ForegroundColor', 'white', ...
        'FontSize', 11, ...
        'Callback', {@embedMessage, hMessage});

    uicontrol('Parent', controlPanel, ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [0.1 0.32 0.8 0.1], ...
        'String', 'Extract Message', ...
        'BackgroundColor', [0.8 0.2 0.2], ...
        'ForegroundColor', 'white', ...
        'FontSize', 11, ...
        'Callback', @extractMessage);

    % Add status, PSNR and extracted message displays
    hStatus = uicontrol('Parent', controlPanel, ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.1 0.25 0.8 0.05], ...
        'String', 'Status: Ready', ...
        'BackgroundColor', 'white', ...
        'HorizontalAlignment', 'left');

    hPSNR = uicontrol('Parent', controlPanel, ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.1 0.2 0.8 0.05], ...
        'String', 'PSNR: -', ...
        'BackgroundColor', 'white', ...
        'HorizontalAlignment', 'left');

    hExtracted = uicontrol('Parent', controlPanel, ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.1 0.1 0.8 0.08], ...
        'String', 'Extracted Message: -', ...
        'BackgroundColor', 'white', ...
        'HorizontalAlignment', 'left');

    % Create image panel (right side)
    imagePanel = uipanel('Parent', fig, ...
        'Title', 'Images', ...
        'Position', [0.29 0.02 0.69 0.96], ...
        'BackgroundColor', 'white');

    % Create axes for images
    ax1 = axes('Parent', imagePanel, ...
        'Units', 'normalized', ...
        'Position', [0.05 0.55 0.45 0.4]);
    title('Original Image');
    axis off;

    ax2 = axes('Parent', imagePanel, ...
        'Units', 'normalized', ...
        'Position', [0.55 0.55 0.45 0.4]);
    title('Scrambled Image');
    axis off;

    ax3 = axes('Parent', imagePanel, ...
        'Units', 'normalized', ...
        'Position', [0.05 0.05 0.45 0.4]);
    title('Stego Image');
    axis off;

    ax4 = axes('Parent', imagePanel, ...
        'Units', 'normalized', ...
        'Position', [0.55 0.05 0.45 0.4]);
    title('Descrambled Image');
    axis off;

    % Store handles
    handles = struct('fig', fig, 'ax1', ax1, 'ax2', ax2, 'ax3', ax3, 'ax4', ax4, ...
        'status', hStatus, 'psnr', hPSNR, 'extracted', hExtracted);
    setappdata(fig, 'handles', handles);
    setappdata(fig, 'images', struct());

    % Rest of the callback functions remain the same
    function loadImage(~, ~)
        try
            [filename, pathname] = uigetfile({'*.png;*.jpg;*.jpeg', 'Image Files (*.png, *.jpg, *.jpeg)'});
            if isequal(filename, 0) || isequal(pathname, 0)
                updateStatus('No image selected');
                return;
            end

            img = imread(fullfile(pathname, filename));
            if size(img, 3) == 3
                img = rgb2gray(img);
            end

            % Store image
            images = struct('original', img);
            setappdata(fig, 'images', images);

            % Display image
            axes(ax1);
            imshow(img);
            axis off;
            title('Original Image');
            
            % Clear other axes
            axes(ax2); cla; title('Scrambled Image'); axis off;
            axes(ax3); cla; title('Stego Image'); axis off;
            axes(ax4); cla; title('Descrambled Image'); axis off;

            updateStatus('Image loaded successfully');
        catch ex
            updateStatus(['Error: ' ex.message]);
        end
    end

    function embedMessage(~, ~, hMessage)
        try
            images = getappdata(fig, 'images');
            if ~isfield(images, 'original')
                updateStatus('Please load an image first');
                return;
            end

            message = get(hMessage, 'String');
            if isempty(message)
                updateStatus('Please enter a message');
                return;
            end

            % Define parameters
            a = 35; b = 28; c = 8/3; d = 2; e = 1; numIter = 2000;

            % Scramble image
            scrambled = hyperchaoticScramble(images.original, a, b, c, d, e, numIter);
            axes(ax2);
            imshow(scrambled);
            axis off;
            title('Scrambled Image');

            % Embed message
            stego = messagembednew(scrambled, message);
            axes(ax3);
            imshow(stego);
            axis off;
            title('Stego Image');

            % Descramble
            descrambled = hyperchaoticDescramble(stego, a, b, c, d, e, numIter);
            axes(ax4);
            imshow(descrambled);
            axis off;
            title('Descrambled Image');

            % Store images
            images.scrambled = scrambled;
            images.stego = stego;
            images.descrambled = descrambled;
            setappdata(fig, 'images', images);

            % Calculate PSNR
            psnr_val = psnr(double(images.original), double(descrambled));
            set(hPSNR, 'String', ['PSNR: ' num2str(psnr_val) ' dB']);

            updateStatus('Message embedded successfully');
        catch ex
            updateStatus(['Error: ' ex.message]);
        end
    end

    function extractMessage(~, ~)
        try
            images = getappdata(fig, 'images');
            if ~isfield(images, 'stego')
                updateStatus('No stego image available');
                return;
            end

            % Extract message
            extracted = extractMessageAndDescramble(images.stego);
            set(hExtracted, 'String', ['Extracted: ' extracted]);
            updateStatus('Message extracted successfully');
        catch ex
            updateStatus(['Error: ' ex.message]);
        end
    end

    function updateStatus(msg)
        set(hStatus, 'String', ['Status: ' msg]);
    end
end